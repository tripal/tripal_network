<?php


// Support Neo4j if the library is installed.
$library = libraries_detect('neo4j-php-client');
if ($library and $library['installed']) {
  require_once "api/tripal_network.neo4j.api.inc";
}

require_once "includes/tripal_network.schema.inc";

/**
 * Implements hook_permission().
 *
 * Set the permission types that the chado module uses.  Essentially we
 *  want permissionis that protect creation, editing and deleting of chado
 *  data objects
 *
 * @ingroup tripal
 */
function tripal_network_permission() {
  return array(
    'install chado' => array(
      'title' => t('Install Chado'),
      'description' => t('Allow the user to install or upgrade a Chado database in the existing Drupal database.')
    ),
    'view chado_ids' => array(
      'title' => t('View Internal IDs'),
      'description' => t('On content pages Tripal will typically provide
          a table of information pulled from the Chado database but the
          primary key IDs for that data is typically not shown.  The
          default Tripal templates can show the primary key ID inside of a
          blue shaded table row if this permission is enabled. This can
          be useful for site developers who might want these IDs when working
          with the underlying database.'),
      'restrict access' => TRUE,
    ),
    'administer chado mviews' => array(
      'title' => t('Administer Chado Materialized Views'),
      'description' => t('Allows the user to create, edit and populate materialized views in the Chado databse.'),
    ),
    'administer chado custom tables' => array(
      'title' => t('Administer Chado Custom Tables'),
      'description' => t('Allows the user to create, edit and delete custom tables in the Chado database.'),
    ),
    'administer db cross-references' => array(
      'title' => t('Administer Chado Databases'),
      'description' => t('Allows the user to create, edit and delete database records in the Chado database.')
    ),
    'administer controlled vocabularies' => array(
      'title' => t('Administer Chado Controlled Vocabularies'),
      'description' => t('Allows the user to create, edit and delete controlled vocabularies in the Chado database.')
    ),
    'administer chado semantic web' => array(
      'title' => t('Administer Semantic Web and Chado Integration'),
      'description' => t('Allows the user to assign controlled vocabulary terms to tables and table columns in Chado.')
    ),
    
  );
}

/**
 * Implements hook_menu()
 *
 * Specifies menu items and URLs used by this module.
 *
 * @ingroup tripal_network
 */
function tripal_network_menu() {
  $items = array();

  /*
   * Module Search Form
   */
  $term = tripal_load_term_entity(array('vocabulary' => 'NCIT', 'accession' => 'C61377'));
  $bundle = tripal_load_bundle_entity(array('term_id' => $term->id));
  $items['networks/search'] = array(
    'title' => 'Network Search',
    'description' => 'Search for network modules',
    'page callback' => 'tripal_network_search_page',
    'access arguments' => array('view ' . $bundle->name),
    'file' => '/includes/tripal_network.search.inc',
    'type' => MENU_CALLBACK,
  );
  // the AJAX callback for advanced search form networks
  $items['networks/search/networks'] = array(
    'page callback' => 'tripal_network_search_get_networks',
    'access arguments' => array('view ' . $bundle->name),
    'type' => MENU_CALLBACK
  );
  // the AJAX callback for advanced search form networks
  $items['networks/search/traits'] = array(
    'page callback' => 'tripal_network_search_get_traits',
    'access arguments' => array('view ' . $bundle->name),
    'type' => MENU_CALLBACK
  );

  $items['networks/viewer'] = array(
    'page callback' => 'tripal_network_viewer_page',
    'page arguments' => array(),
    'access arguments' => array('view ' . $bundle->name),
    'file' => '/includes/tripal_network.viewer.inc',
    'file path' => drupal_get_path('module','tripal_network'),
    'type' => MENU_CALLBACK,
  );
  $items['networks/retrieve'] = array(
    'page callback' => 'tripal_network_viewer_ajax_retrieve',
    'page arguments' => array(),
    'access arguments' => array('view ' . $bundle->name),
    'file' => '/includes/tripal_network.viewer.inc',
    'file path' => drupal_get_path('module','tripal_network'),
    'type' => MENU_CALLBACK,
  );
  $items['networks/function'] = array(
    'page callback' => 'tripal_network_viewer_ajax_function',
    'page arguments' => array(),
    'access arguments' => array('view ' . $bundle->name),
    'file' => '/includes/tripal_network.viewer.inc',
    'file path' => drupal_get_path('module','tripal_network'),
    'type' => MENU_CALLBACK,
  );

  // All extension modules should have an administrative menu item
  // with the path set to 'admin/tripal/extension/[module name]'.
  $items['admin/tripal/extension/network'] = array(
    'title' => 'Biological Networks',
    'description' => 'Manage biological networks made available by this site.',
    'page callback' => 'tripal_network_admin_home',
    'access arguments' => array('administer tripal_network'),
    'file' => '/includes/tripal_network.admin.inc',
    'file path' => drupal_get_path('module','tripal_network'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/tripal/extension/network/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/tripal/extension/network/help'] = array(
    'title' => 'Help',
    'description' => 'Documentation for the Tripal Network module..',
    'page callback' => 'tripal_network_admin_help',
    'access arguments' => array('administer tripal_network'),
    'type' => MENU_LOCAL_TASK,
    'file' => '/includes/tripal_network.graphML_loader.inc',
    'file path' => drupal_get_path('module','tripal_network'),
    'weight' => 2,
  );

  $items['networks/ajax/filter'] = array(
    'page callback' => 'tripal_network_ajax_filter',
    'page arguments' => array(),
    'access arguments' => array('access network'),
    'file' => '/includes/tripal_network.ajax.inc',
    'file path' => drupal_get_path('module','tripal_network'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_views_api()
 *
 * This hook tells drupal that there is views support for
 * for this module which then automatically includes the tripal_db.views.inc
 * where all the views integration code is found.
 *
 * @ingroup tripal_network
 */
function tripal_network_views_api() {
  return array(
    'api' => 3.0,
  );
}

/**
 *  Implements hook_theme()
 *
 * @ingroup tripal_network
 */
function tripal_network_theme($existing, $type, $theme, $path) {

  $items = array(
    // HTML AND PAGE THEMES
    'html__networks_viewer' => array(
      'template' => 'html--networks_viewer',
      'render element' => 'html',
      'base hook' => 'html',
      'path' => drupal_get_path('module', 'tripal_network') . "/theme/templates",
    ),
    'page__networks_viewer' => array(
      'template' => 'page--networks_viewer',
      'render element' => 'page',
      'base hook' => 'page',
      'path' => drupal_get_path('module', 'tripal_network') . "/theme/templates",
    ),
    'tripal_network_viewer' => array(
      'template' => 'tripal_network_viewer',
      'variables' =>  array(),
      'path' => drupal_get_path('module', 'tripal_network') . "/theme/templates",
    ),
    'tripal_network_viewer_property' => array(
      'render element' => 'element',
      'path' => drupal_get_path('module', 'tripal_network') . "/includes/tripal_network.viewer.inc",
    ),
//     'tripal_network_search_form' => array(
//       'render element' => 'form',
//       'path' => drupal_get_path('module', 'tripal_network') . "/includes/tripal_network.search.inc",
//     ),
  );
  return $items;
}


/**
 * Implements hook_help()
 *
 * Adds a help $formpage to the module list
 */
function tripal_network_help ($path, $arg) {

  // EXPLANATION: in the tripal_network_menu() function above we created
  // a menu item for the help documentation.  The menu item specified
  // a function that should be called when the menu item is clicked.  This
  // is that function.  But, rather than place HTML code in this function
  // we want to have our help documentation in a template galaxy.  We
  // specified in the tripal_network.theme() function that we have a template
  // galaxy so now we want to use get the contents of that template galaxy and
  // return it.
  if ($path == 'admin/help#tripal_network') {
    return theme('tripal_network_help', array());
  }
}


/**
 * Impelmentation of hook_ajax_render_alter().
 *
 * This function allows us to add new command to the ajax callback when
 * it returns.  This way we can call Javascript functions directly from our
 * PHP code.
 *
 * @param $commands
 */
function tripal_network_ajax_render_alter(&$commands) {

  // always update the sidebar on every ajax return.
  if(array_key_exists('tripal-network-ajax-commands', $_SESSION)) {
    foreach ($_SESSION['tripal-network-ajax-commands'] as $command) {
      $commands[] = $command;
    }
    unset($_SESSION['tripal-network-ajax-commands']);
  }
}

/**
 * A helper function for adding new command to ajax calls.
 *
 * When we want to call a function in JavaScript we use this function to
 * add new "commands".  These commands are added to the ajax response by
 * the tripal_network_ajax_render_alter() function before the AJAX is
 * returned. This function stores all of the commands that are requested
 * until that AJAX call is returned.
 *
 * @param $commands
 *   A single Drupal compatible ajax command created by calling
 *   ajax_command_invoke().
 */
function tripal_network_add_ajax_command($command) {
  if(!array_key_exists('tripal-network-ajax-commands', $_SESSION)) {
    $_SESSION['tripal-network-ajax-commands'] = array();
  }
  $_SESSION['tripal-network-ajax-commands'][] = $command;
}


/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */

function tripal_network_libraries_info() {
  $libraries = array();
  $libraries['linkurious.js'] = array(
    'name' => 'linkurious.js',
    'vendor url' => 'http://linkurio.us/',
    'download url' => 'https://github.com/Linkurious/linkurious.js',
    'version arguments' => array(
      'file' => 'package.json',
      'pattern' => '/"version": "(.*?)"/',
      'lines' => 5,
    ),
    'files' => array(
    ),
    'depenedencies' => array(
      'sigmajs (>1.1.0)'
    ),
    'versions' => array(
      '1.5.1' => array(),
    ),
  );
  $libraries['neo4j-php-client'] = array(
    'name' => 'neo4j-php-client',
    'vendor url' => 'https://github.com/graphaware/neo4j-php-client',
    'download url' => 'https://github.com/graphaware/neo4j-php-client',
    'files' => array(
      'php' => array('galaxy.inc'),
    ),
  );


  return $libraries;
}
